package fr.antoine.gui;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import fr.antoine.Main;
import fr.antoine.word.WordCreator;

import javax.swing.*;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.File;
import java.nio.file.Path;
import java.util.Locale;

public class MainFrame extends JFrame {
    private JLabel headerTitle;
    private JPanel mainContainer;
    private JPanel startPanel;
    private JCheckBox isSubject;
    private JCheckBox isCorrection;
    private JPanel checkboxPanel;
    private JLabel checkboxTitle;
    private JButton generateButton;
    private JPanel buttonPanel;
    private JLabel nameLabel;
    private JLabel dateLabel;
    private JTextField nameField;
    private JFormattedTextField dateField;
    private JLabel errorNumberLabel;
    private JLabel errorDateLabel;
    private JPanel textPanel;
    private JButton chooseDestinationButton;
    private JLabel folderDestinationLabel;
    private JLabel destinationConfirmationLabel;

    private JFileChooser chooser;
    private Path destination;

    private final MainFrame instance;

    public MainFrame() {

        instance = this;

        final Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();

        setTitle("FMTT");
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        setSize((int) (screenSize.getWidth() / 2), (int) (screenSize.getHeight() / 2));
        setLocationRelativeTo(null);
        setContentPane(this.startPanel);
        setVisible(true);

        generateButton.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent event) {

                final String fileName = nameField.getText();

                if (destination == null) {

                    JOptionPane.showMessageDialog(instance, "Tu n'as pas sélectionné de destination");
                    return;

                }

                if (fileName == null || fileName.isBlank() || fileName.isEmpty()) {

                    JOptionPane.showMessageDialog(instance, "Tu n'as donné de nom à ta colle.");
                    return;

                }

                if (!isSubject.isSelected() && !isCorrection.isSelected()) {

                    JOptionPane.showMessageDialog(instance, "Merci de sélectionner au moins une option parmi \"Sujet\" et \"Correction\".");
                    return;

                }

                //Generate button Listener
                final WordCreator wordCreator = new WordCreator(destination, fileName);

                if (isSubject.isSelected())

                    wordCreator.createWordFile(false);

                if (isCorrection.isSelected())

                    wordCreator.createWordFile(true);

                JOptionPane.showMessageDialog(Main.getInstance().getMainFrame(), "Le" + ((isCorrection.isSelected() && isSubject.isSelected()) ? "s" : "")
                        + " fichier" + ((isCorrection.isSelected() && isSubject.isSelected()) ? "s" : "") + ((isCorrection.isSelected() && isSubject.isSelected()) ? " ont" : " a")
                        + " bien été créé" + ((isCorrection.isSelected() && isSubject.isSelected()) ? "s" : ""));

            }
        });
        chooseDestinationButton.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent event) {

                chooser = new JFileChooser();
                chooser.setCurrentDirectory(new File("."));
                chooser.setDialogTitle("Choisis le dossier d'arrivée");
                chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
                //
                // disable the "All files" option.
                //
                chooser.setAcceptAllFileFilterUsed(false);
                //
                if (chooser.showOpenDialog(instance) == JFileChooser.APPROVE_OPTION) {

                    destination = chooser.getSelectedFile().toPath();
                    destinationConfirmationLabel.setText(destination.toString());

                }

            }

        });
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        startPanel = new JPanel();
        startPanel.setLayout(new GridLayoutManager(3, 3, new Insets(0, 0, 0, 0), -1, -1));
        headerTitle = new JLabel();
        Font headerTitleFont = this.$$$getFont$$$("Arial Black", Font.BOLD, 16, headerTitle.getFont());
        if (headerTitleFont != null) headerTitle.setFont(headerTitleFont);
        headerTitle.setForeground(new Color(-8105572));
        headerTitle.setText("From Moodle To Tuto");
        startPanel.add(headerTitle, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(184, 20), null, 0, false));
        mainContainer = new JPanel();
        mainContainer.setLayout(new GridLayoutManager(6, 5, new Insets(0, 0, 0, 0), -1, -1));
        startPanel.add(mainContainer, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        checkboxPanel = new JPanel();
        checkboxPanel.setLayout(new FlowLayout(FlowLayout.CENTER, 5, 5));
        mainContainer.add(checkboxPanel, new GridConstraints(5, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, new Dimension(50, -1), null, 0, false));
        isSubject = new JCheckBox();
        isSubject.setText("Sujet");
        checkboxPanel.add(isSubject);
        isCorrection = new JCheckBox();
        isCorrection.setText("Correction");
        isCorrection.setVerticalAlignment(1);
        checkboxPanel.add(isCorrection);
        textPanel = new JPanel();
        textPanel.setLayout(new GridLayoutManager(3, 3, new Insets(0, 0, 0, 0), -1, -1));
        mainContainer.add(textPanel, new GridConstraints(2, 0, 1, 3, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        nameLabel = new JLabel();
        nameLabel.setText("Entre le numéro de la colle");
        textPanel.add(nameLabel, new GridConstraints(0, 0, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        dateLabel = new JLabel();
        dateLabel.setText("Entre la date de la colle");
        textPanel.add(dateLabel, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        nameField = new JTextField();
        textPanel.add(nameField, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        dateField = new JFormattedTextField();
        dateField.setText("01/01/2024 ");
        textPanel.add(dateField, new GridConstraints(1, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        errorNumberLabel = new JLabel();
        errorNumberLabel.setForeground(new Color(-1760456));
        errorNumberLabel.setText("");
        textPanel.add(errorNumberLabel, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        errorDateLabel = new JLabel();
        errorDateLabel.setForeground(new Color(-1760456));
        errorDateLabel.setText("");
        textPanel.add(errorDateLabel, new GridConstraints(2, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        checkboxTitle = new JLabel();
        checkboxTitle.setText("Sélectionne ce que tu veux générer");
        mainContainer.add(checkboxTitle, new GridConstraints(3, 0, 1, 2, GridConstraints.ANCHOR_NORTHWEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        mainContainer.add(panel1, new GridConstraints(2, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        chooseDestinationButton = new JButton();
        chooseDestinationButton.setText("Choisir un dossier..");
        mainContainer.add(chooseDestinationButton, new GridConstraints(5, 1, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        folderDestinationLabel = new JLabel();
        folderDestinationLabel.setText("Choisis la destination");
        mainContainer.add(folderDestinationLabel, new GridConstraints(3, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        destinationConfirmationLabel = new JLabel();
        destinationConfirmationLabel.setEnabled(false);
        Font destinationConfirmationLabelFont = this.$$$getFont$$$(null, Font.BOLD, 12, destinationConfirmationLabel.getFont());
        if (destinationConfirmationLabelFont != null)
            destinationConfirmationLabel.setFont(destinationConfirmationLabelFont);
        destinationConfirmationLabel.setForeground(new Color(-16777216));
        destinationConfirmationLabel.setText("");
        mainContainer.add(destinationConfirmationLabel, new GridConstraints(4, 2, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        buttonPanel = new JPanel();
        buttonPanel.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        startPanel.add(buttonPanel, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        generateButton = new JButton();
        generateButton.setText("Générer la colle");
        buttonPanel.add(generateButton, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        startPanel.add(panel2, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, new Dimension(20, -1), null, 0, false));
        final JPanel panel3 = new JPanel();
        panel3.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        startPanel.add(panel3, new GridConstraints(1, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, new Dimension(20, -1), null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return startPanel;
    }

}
