package fr.antoine.gui;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import fr.antoine.Main;

import javax.swing.*;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.util.Locale;

public class ProgressBar {

    private JProgressBar progressBar;
    private JPanel panel;
    private JLabel titleLabel;
    private final String title;
    private JDialog jDialog;

    public ProgressBar(final String title, final int progressBarMax) {

        this.title = title;
        this.progressBar.setMinimum(0);
        this.progressBar.setMaximum(progressBarMax);

    }

    public void showProgressBar() {

        this.jDialog = new JDialog(Main.getInstance().getMainFrame(), false);

        this.panel.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        this.panel.setBorder(BorderFactory.createLineBorder(Color.black));

        this.titleLabel.setText(title);
        this.jDialog.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
        this.jDialog.setContentPane(this.panel);
        this.jDialog.setSize(new Dimension(Main.getInstance().getMainFrame().getWidth() / 2, Main.getInstance().getMainFrame().getHeight() / 6));
        this.jDialog.setUndecorated(true);
        this.jDialog.setLocationRelativeTo(Main.getInstance().getMainFrame());
        this.jDialog.setVisible(true);

    }

    public void updateBar(final int value) {

        this.progressBar.setValue(value);
        this.panel.repaint();

    }

    public void setMaximum(final int maximum) {

        this.progressBar.setMaximum(maximum);
        this.panel.repaint();

    }

    public void setTitle(final String title) {

        this.titleLabel.setText(title);
        this.panel.repaint();

    }

    public JDialog getjDialog() {
        return jDialog;
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panel = new JPanel();
        panel.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        progressBar = new JProgressBar();
        panel.add(progressBar, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        titleLabel = new JLabel();
        Font titleLabelFont = this.$$$getFont$$$(null, Font.BOLD, 20, titleLabel.getFont());
        if (titleLabelFont != null) titleLabel.setFont(titleLabelFont);
        titleLabel.setText("");
        panel.add(titleLabel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel;
    }

}
